\input texinfo @c -*-texinfo-*-
@setfilename guide.info
@include version.texi
@settitle Guidelines for modern code review @value{UPDATED-MONTH}
@setchapternewpage odd

@finalout

@smallbook


@c @copying

MIT licensed.


@shorttitlepage Modern review rules.

@titlepage
@title Guidelines for modern code review
@subtitle @value{UPDATED-MONTH}
@author John Hanley

@page
@vskip 0pt plus 1filll
@c @insertcopying
@end titlepage

@ifnottex
@node Top
@top review rules

@c @insertcopying

@cindex foo
@cindex baz
@end ifnottex


@c @node Introduction
@chapter Introduction

Code quality matters.

There is one rule above all others:

Be kind to the reader.

Several rules stem from this.
@itemize @bullet
@item
DRY - don't repeat yourself.
@item
If a method has grown longer than a hundred lines, break it apart,
with helper methods.
@item
Coupling of variables is a burden upon the reader.
Definitely stop once a class has two dozen attributes - break it up.
@end itemize

Continuous integration.

Always have a running system.

As a special case of this, always have Jenkins running your unit tests.

Measure code coverage of your tests.

To implement a new feature, first write a failing test.

When you notice you're unhappy with a computed result or an elapsed time,
first write a failing test which captures that behavior, then edit the
code until your test succeeds.


Refactor.

Parameterize.

Copy-n-paste has its place in the development process,
but not on the master branch, not in code that will be deployed.

When you implement functionality for closely related use cases,
you are presented with an opportunity, the use cases show where you
might usefully parameterize and generalize. Grasp the opportunity!
Do not let it pass you by.

Like all code, copy-n-pasted code will probably contain bugs.
Upon pasting it once or twice, it's a certainty that you've pasted one
or two copies of each bug. When the original bug is noticed and fixed,
it is unlikely that the pasted replicas will also be fixed. Parameterize!

When you copy code, take care to keep it out of files that will be
committed and deployed. Write a failing test, paste the code of interest
as a helper method for the test, and edit to taste. Once the test is
passing and you're happy with the code, commit it, then work on moving
it out of the test and into the deployed production code base.


@summarycontents
@contents
@bye
